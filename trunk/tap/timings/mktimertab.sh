#!/bin/sh
#
# File:    sumtimes.sh
# Author:  Alex Stivala
# Created: June 2011
#
# mktimertab.sh - make table for R read.table() from fw_8thread*.sh output
#
# Usage: mktimertab.sh
#
# Input on stdin is output from fw_8thread_script.sh (etc.) output
# Output on stdout is table for R read.table(, header=T)
#
# assume times are in this sort of format, as generated by /usr/bin/time
# on Linux:
#49576.89user 2907.19system 14:45:02elapsed 98%CPU (0avgtext+0avgdata 0maxresident)k
#0inputs+0outputs (0major+504890689minor)pagefaults 0swaps
# or (for less than an hour):
#2603.51user 217.97system 47:10.00elapsed 99%CPU (0avgtext+0avgdata 0maxresident)k
#0inputs+0outputs (0major+26943522minor)pagefaults 0swaps
#
# $Id: mktimertab.sh 412 2011-06-27 00:30:44Z astivala $
#

if [ $# -ne 0 ]; then
    echo "Usage: $0" >&2
    exit 1
fi

got_time=0
runNum=1

printf "runNum\tthreads\tseconds\n"
while read line
do
  echo "${line}" | grep --text elapsed  >/dev/null 2>&1
  if [ $? -eq 0  -a $got_time -eq 0 ]; then
      got_time=1
      total_seconds=0
      elapsed=`echo "${line}" | grep --text elapsed | awk '{print $3}' | sed 's/elapsed//' | tail -1`
      dotindex=`expr index ${elapsed} '.'`
      if [ ${dotindex} -ne 0 ]; then
              # less than an hour
              colonindex=`expr index ${elapsed} ':'`
              colonindex=`expr $colonindex - 1`
              hours=0
              mins=`expr substr ${elapsed} 1 ${colonindex}`
              secindex=`expr $colonindex + 2`
              secs=`expr substr ${elapsed} ${secindex} 2`
      else
              colonindex=`expr index ${elapsed} ':'`
              colonindex=`expr $colonindex - 1`
              hours=`expr substr ${elapsed} 1 ${colonindex}`
              next=`expr $colonindex + 2`
              rest=`expr substr ${elapsed} $next 999`
              colonindex=`expr index ${rest} ':'`
              colonindex=`expr $colonindex - 1`
              mins=`expr substr ${rest} 1 $colonindex`
              next=`expr $colonindex + 2`
              rest=`expr substr ${rest} $next 999`
              secs=$rest
      fi
      total_seconds=`expr $total_seconds + $hours \* 3600 + $mins \* 60 + $secs`
     printf "%d\t%d\t%d\n" $runNum $threads $total_seconds
  else
     echo "${line}" | grep --text threads  >/dev/null 2>&1
     if [ $? -eq  0 ]; then
         got_time=0
         threads=`echo "${line}" | awk '{print $3}'`
     else
         echo "${line}" | grep --text runNum  >/dev/null 2>&1
         if [ $? -eq  0 ]; then
             got_time=0
             runNum=`echo "${line}" | awk '{print $3}'`
         fi
     fi
  fi
done

