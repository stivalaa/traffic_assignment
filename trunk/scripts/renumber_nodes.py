#!/usr/bin/env python
###############################################################################
#
# renumber_nodes.py - Renumber nodes back to original a
#
# File:    renumber_nodes.py
# Author:  Alex Stivala
# Created: October 2011
#
# $Id: renumber_nodes.py 790 2011-10-06 02:49:50Z astivala $
#
###############################################################################

"""

Read the mapping from original node numbers to renumbered
sequential node numbers as written by esir2tapnetnode, reducenetwork.py
 as

oldnum newnum

one per line, and convert node numbers in flow output file from tap_frankwolfe
etc back to original node numbers according to the mapping (reversed).

See usage in docstring fro main()
"""


import sys,os
from time import strftime, localtime

from parsetapfiles import parse_flow_file,LinkFlow,flow_to_linkdict
from traffic_assign import print_flow
#-----------------------------------------------------------------------------
#
# Function definitions
#
#-----------------------------------------------------------------------------

def parse_number_map(fh):
    """
    Read the mapping from original node numbers to renumbered
    sequential node numbers as written by esir2tapnetnode, reducenetwork.py
    as
    
    oldnum newnum

    one per line. Lines beggining with '~' character are comments.

    Parameters:
       fh -open (read) filehnadle to read number map from

    Return value:
       dict { new_number : old_numnber} mapping the new node numbers back to orig
       or None on error
    """
    number_dict = {}
    for line in fh:
        if line[0] == '~':
            continue
        sline = line.split()
        if len(sline) != 2:
            sys.stderr.write('ERROR: bad line "%s"\n' % (line))
            return None
        oldnum = int(sline[0])
        newnum = int(sline[1])
        if number_dict.has_key(newnum):
            sys.stderr.write('ERROR:  duplicate new number %d\n' % (newnum))
            return None
        number_dict[newnum] = oldnum
    return number_dict

#-----------------------------------------------------------------------------
#
# Main
#
#-----------------------------------------------------------------------------

def usage(progname):
    """
    Print usage message and exit
    """

    sys.stderr.write("Usage: " +progname + " number_map_file\n")
    sys.exit(1)


def main():
    """
    main for renumber_nodes.py

    Usage: renumber_nodes.py number_map_file

    number_map_file is the node number map file from esri2tapnetnode.py or reducenetwork.py

    Input is a flow file on stdin, output is flow file with renubmered nodes on stdout.
   
    Example usage:


    """
    if len(sys.argv) != 2:
        usage(os.path.basename(sys.argv[0]))

    number_map_file = sys.argv[1]

    timestamp = strftime("%d%b%Y %H:%M:%S", localtime())
    
    number_map = parse_number_map(open(number_map_file))
    flows = parse_flow_file(sys.stdin)
    flow_dict = flow_to_linkdict(flows)
    renumbered_flow_dict = {}
    for linkflow in flow_dict.itervalues():
        lf = LinkFlow()
        lf.init_node = number_map[linkflow.init_node]
        lf.term_node = number_map[linkflow.term_node]
        lf.volume = linkflow.volume
        lf.cost = linkflow.cost
        renumbered_flow_dict[(lf.init_node, lf.term_node)] = lf

    outfh = sys.stdout
    outfh.write('~ Generated by: ' + ' '.join(sys.argv) + '\n')
    outfh.write('~ On: ' + timestamp + '\n')

    # dodgy: fake net object just t oget num_nodes and num_keys used in print_flow
    class Net:
        pass
    net = Net()
    net.num_nodes = max(number_map.itervalues())
    net.num_links = len(renumbered_flow_dict)

    print_flow(outfh, net, renumbered_flow_dict)

    
if __name__ == "__main__":
    main()

