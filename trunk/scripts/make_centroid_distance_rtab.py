#!/usr/bin/env python
###############################################################################
#
# make_centroid_distance_rtab.py - make centroid distance table
#
# File:    make_centroid_distance_rtab.py
# Author:  Alex Stivala
# Created: May 2011
#
# $Id: make_centroid_distance_rtab.py 689 2011-09-13 06:07:50Z astivala $
# 
###############################################################################

"""
Make table for R read.table() of centroid distance between road upgrades,
given the road network and node XY table and network modificatinos file.

See usage information in comment documentatino for main.
"""

import sys,os
from time import strftime, localtime
from math import sqrt

from parsetapfiles import parse_net_file,parse_node_file,parse_mod_file


#-----------------------------------------------------------------------------
#
# Constants
#
#-----------------------------------------------------------------------------


#-----------------------------------------------------------------------------
#
# Classes
#
#-----------------------------------------------------------------------------

#-----------------------------------------------------------------------------
#
# Main
#
#-----------------------------------------------------------------------------
    
def usage(progname):
    """
    Print usage message and exit
    """
    
    sys.stderr.write("Usage: " +progname + " netfilename nodefilename mods_filename\n")
    sys.exit(1)


def main():
    """
    main for make_centroid_distance_rtab.py

    Usage: make_centroid_distance_rtab.py netfilename nodefilename mods_file orig_file_file flow_file_prefix

      netfilename     is th ename of the network data file defining the road
                       network
      mods_file          is the file containg description of road upgrades
                        (also used as input in tap_frankwolfe_mpi program)
      nodefilename   is name of node file giving x,y cooridinates for nodes
                       appended to get link flows for each change.

    Output on stdout is

     changeid1	changeid2	CentroidDistance

    CentroidDistance     - Euclidean distance between centroids of upgrade
                           node co-ordinates
    Example usage:

    make_centroid_distance_rtab.py ChicagoRegional_net.txt ChicagoRegional_node.txt ChicagoRegional_mods.txt
    
    """
    if len(sys.argv) != 4:
        usage(os.path.basename(sys.argv[0]))

    netfilename = sys.argv[1]
    nodefilename = sys.argv[2]
    mods_file = sys.argv[3]

    timestamp = strftime("%d%b%Y %H:%M:%S", localtime())

    net = parse_net_file(netfilename)
    nodexydict = parse_node_file(nodefilename)
    netmod = parse_mod_file(mods_file)

    sys.stdout.write("# Generated by: " + " ".join(sys.argv) + "\n")
    sys.stdout.write("# On: " + timestamp + "\n")
    sys.stdout.write("# From input:\n")

    sys.stdout.write("ChangeId1\tChangeId2\tCentroidDistance\n")

    # since projects (changeids) can have multiple link changes (or adds)
    # we get a list of all unique changeids
    changeid_list = sorted(list(set([mod.change_id for mod in netmod])))
    # now process each pair of changes
    for i in xrange(len(changeid_list)):
        for j in xrange(i+1, len(changeid_list)):
            changeid1 = changeid_list[i]
            changeid2 = changeid_list[j]
            change1mods = [mod for mod in netmod if mod.change_id == changeid1]
            change2mods = [mod for mod in netmod if mod.change_id == changeid2]
            change1nodes = ([mod.mod_link.init_node for mod in change1mods] + 
                            [mod.mod_link.term_node for mod in change1mods])
            change2nodes = ([mod.mod_link.init_node for mod in change2mods] + 
                            [mod.mod_link.term_node for mod in change2mods])
            change1centroidX =(sum([nodexydict[node][0] for node in change1nodes])/
                              float(len(change1nodes)))
            change1centroidY =(sum([nodexydict[node][1] for node in change1nodes])/
                              float(len(change1nodes)))
            change2centroidX =(sum([nodexydict[node][0] for node in change2nodes])/
                              float(len(change2nodes)))
            change2centroidY =(sum([nodexydict[node][1] for node in change2nodes])/
                              float(len(change2nodes)))
            centroidDistance = sqrt( (change2centroidX - change1centroidX)**2  +
                                     (change2centroidY - change1centroidY)**2 )
    
            sys.stdout.write("%s\t%s\t%f\n" % (changeid1, changeid2, centroidDistance))

if __name__ == "__main__":
    main()
    
