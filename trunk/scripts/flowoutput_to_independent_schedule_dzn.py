#!/usr/bin/env python
##############################################################################
#
# flow_output_to_independent_schedule_dzn - read mods file and VHT 
#                   from tap_frankwolfe_mpi stderr 
#                  and generate .dzn file for  input to Zinc model
#                  to compute optimal upgrde schedule assuming idnepdnentce of
#                  upgrdaes
#
# File:    flow_output_to_independent_schedule_dzn.py
# Author:  Alex Stivala
# Created: May 2011
#
# $Id: flowoutput_to_independent_schedule_dzn.py 716 2011-09-19 07:15:54Z astivala $
#
#
##############################################################################

"""
Parse the stderr from tap_frankwolfe_mpi giving VHT for each individual
from both upgrades in combination) and write .dzn format for Zinc model 
to solve the program to select optimal schedule, assuming all upgrades
indpendent of each other

Usage:
   flow_output_to_independent_schedule_dzn.py 


Output is .dzn zinc data text on stdout.

Parameters are hardocded in this file as constants.

"""

import sys,os
import re
import getopt
from time import strftime, localtime
import itertools

from parsetapfiles import parse_mod_file,NetMod,\
                          parse_individual_vht_from_tap_err,\
                          parse_pairwise_vht_from_tap_err,\
                          parse_subset_vht_from_tap_err     

#-----------------------------------------------------------------------------
#
# Constants / Parameters
#
#-----------------------------------------------------------------------------

VHT2dollarFactor = 10.00 * 365 # dollars/VHT * days/year
interestRate = 0.040           # annual interest rate 
     

# number of planning periods (include original baseline)
NUM_PERIODS=5

# budget in each period (start at original baseline year)
# these are at present value
BUDGETS=[1000000.00,4000000.00,1500000.00,3000000.00,5000000.00]

HOME=os.getenv('HOME')
# road network modificatnos file as used by tap_frankwolfe_mpi
MODS_FILE=HOME+'/traffic_assignment/trunk/tap/ChicagoRegional_mods.txt'

# original baseilne VHT result
BASELINE_ORIG_FW_OUT=HOME+'/traffic_assignment/trunk/tap/results/ChicagoRegional_fw_out.txt'

# baseline indivial modification TAP results
BASELINE_INDIVIDUAL_FW_OUT=HOME+'/traffic_assignment/trunk/tap/results/ChicagoRegional_mods_goliath.err'


# Directory containing period T TAP results, where T = 1,2,...NUM_PERIODS 
# is appended to the directory name e.g. if this is /tap_data then
# we use /tap_data1 /tap_data2 etc.
PERIOD_TAP_RESULTS_DIR=HOME+'/traffic_assignment/trunk/data/ChicagoRegional_tripmod'

# filename in PERIOD_TAP_RESULTS_DIR of original (no upgrades) TAP results
PERIOD_TAP_ORIG_FW_OUT='ChicagoRegional_fw.out.txt'

# filename in PERIOD_TAP_RESULTS_DIR of individual upgrade TAP results
PERIOD_TAP_INDIVIDUAL_FW_OUT='ChicagoRegional_mods_individual.err'



#-----------------------------------------------------------------------------
#
# main
#
#-----------------------------------------------------------------------------

def usage(progname):
    """
    print usage msg and exit
    """
    sys.stderr.write("usage: " + progname + "\n")
    sys.exit(1)

def main():
    """
    See usage message in module header block
    """
    try:
        opts,args = getopt.getopt(sys.argv[1:], "")
    except:
        usage(sys.argv[0])
    for opt,arg in opts:
        usage(sys.argv[0])

    if len(args) != 0:
        usage(sys.argv[0])

    timestamp = strftime("%d%b%Y %H:%M:%S", localtime())

    netmod = parse_mod_file(MODS_FILE)

    # since projects (changeids) can have multiple link changes (or adds)
    # we get a list of all unique changeids
    idlist = sorted(list(set([mod.change_id for mod in netmod])))

    outfh = sys.stdout
    outfh.write('% Generated by: ' + ' '.join(sys.argv) + '\n')
    outfh.write('% On: ' + timestamp + '\n')

    outfh.write('numperiods = ' + str(NUM_PERIODS) + ';\n')
    outfh.write('n = ' + str(len(idlist)) + ';\n')
    outfh.write('VHT2dollarFactor = %f ;\n' % VHT2dollarFactor)
    outfh.write('interestRate = %f ;\n' % interestRate)
 
    outfh.write('upgradeName = ' + re.sub("'",'"',str(idlist)) + ';\n')
    outfh.write('Budget = ' + str(BUDGETS) + ';\n')

    # since projects may have multiple changes need to sum up costs for total
    costlist = [ sum(change_costs) for change_costs in [
            [mod.project_cost for mod in netmod if mod.change_id == projid]
            for projid in idlist ] ]

    outfh.write('cost = ' + str(costlist) + ';\n')

    period_vht_benefit_dict = {} # dict of { period :   vhtreduction_list  }
    for period in xrange(NUM_PERIODS):
        if period == 0:
            orig_fw_out = BASELINE_ORIG_FW_OUT
            individual_fw_out = BASELINE_INDIVIDUAL_FW_OUT
        else:
            orig_fw_out = PERIOD_TAP_RESULTS_DIR + str(period) + "/" + PERIOD_TAP_ORIG_FW_OUT
            individual_fw_out = PERIOD_TAP_RESULTS_DIR + str(period) + "/" + PERIOD_TAP_INDIVIDUAL_FW_OUT
        orig_vht = None
        for line in open(orig_fw_out):
            if line[:10] == "total cost":
                orig_vht = float(line.split()[3])
                break
        if orig_vht == None:
            for line in open(orig_fw_out):
                if "total cost" in line and line.rstrip()[-4:] != " ms)":
                    orig_vht = float(line.split()[-1])

        vht_dict = parse_individual_vht_from_tap_err(individual_fw_out)
        period_vht_benefit_dict[period] =  [ orig_vht - vht_dict[changeid] for changeid in idlist]

    outfh.write('benefitVHT = [|\n')
    for period in xrange(NUM_PERIODS):
        if period > 0:
             outfh.write('               | ')
        else:
            outfh.write('                 ')
        outfh.write(','.join([str(period_vht_benefit_dict[period][i]) for i in xrange(len(idlist))])  + ',\n')
    outfh.write('              |];\n')


if __name__ == "__main__":
    main()
